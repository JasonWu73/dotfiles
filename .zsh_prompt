#!/usr/bin/env zsh

##
# 终端命令提示符
##

# Git 版本控制信息，变量 `vcs_info_msg_0_`
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
# 格式化通用输出
 zstyle ':vcs_info:git:*' formats '%F{7}on%f %F{046}%b%f' # dark
#zstyle ':vcs_info:git:*' formats '%F{000}on%f %F{034}%b%f' # light
# 格式化 merge 或 rebase 时输出
 zstyle ':vcs_info:git*' actionformats '%F{7}on [%f%F{046}%b%f%F{7}|%f%F{196}%a%f%F{7}]%f' # dark
#zstyle ':vcs_info:git*' actionformats '%F{000}on [%f%F{034}%b%f%F{000}|%f%F{196}%a%f%F{000}]%f' # light

# 挂钩函数，在每次终端提示前执行
precmd() {
  vcs_info

  # 设置终端窗口标题
  print -n '\e]2;吴仙杰 🍖\a'
}

# 允许在终端提示符中替换内容
setopt prompt_subst

# 以 root 身份登录时突出显示用户名
if [[ "${USER}" == "root" ]]; then
  username="%F{196}%n%f"
  prompt_sign='#'
else
   username="%F{208}%n%f" # dark
#  username="%F{166}%n%f" # right
  prompt_sign='$'
fi

# 通过 SSH 连接时突出显示主机名
if [[ "${SSH_TTY}" ]]; then
  hostname="%F{196}%m%f"
else
   hostname="%F{226}%m%f" # dark
#  hostname="%F{208}%m%f" # light
fi

# 默认交互式提示符
# 注意：这里必须是单引号
# shellcheck disable=SC2154
# dark
 PS1='${username} %F{7}at%f ${hostname} %F{7}in %F{4}%~%f ${vcs_info_msg_0_}
 %F{7}${prompt_sign}%f '
# light
#PS1='${username} %F{000}at%f ${hostname} %F{000}in %F{039}%~%f ${vcs_info_msg_0_}
#%F{000}${prompt_sign}%f '
export PS1

# 延续交互式提示符
PS2="%F{226}→%f "
export PS2

##
# 自动补全配置
##

# 启用包括 ssh/scp/sftp 主机名的自动补全
autoload -Uz compinit
compinit

# 敲击两下 tab 键激活选择菜单
zstyle ':completion:*' menu select

# 别名自动补全
setopt COMPLETE_ALIASES

# 自动补全忽略字母大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# 加载 zsh/complist 模块，用于对插件列表的补全
zmodload zsh/complist

# 无需 . 就可以显示隐藏文件及文件夹
setopt GLOBDOTS

# 绑定 Vi 导航键
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

##
# 配置命令行 Vi 编辑模式
##

# 设置 zsh 的行编辑器（Zsh Line Editor，ZLE）使用 vi 模式
bindkey -v
# 消除 vi 和 zsh 中 esc 的延迟
export KEYTIMEOUT=1
# 修复 backspace 键在切换 vi 模式后无法删除字符的 bug
bindkey '^?' backward-delete-char

# 在不同的 vi 模式下改变光标形状
vi_mode_cursor() {
  case $KEYMAP in
  vicmd) print -n '\033[1 q' ;; # block cursor
  viins | main) print -n '\033[5 q' ;; # line cursor
  esac
}
zle-keymap-select() {
  vi_mode_cursor
}
zle-line-init() {
  vi_mode_cursor
}
zle-line-finish() {
  vi_mode_cursor
}
zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

# 在 vi 编辑器中编辑命令行
autoload -Uz edit-command-line
zle -N edit-command-line

# 绑定快捷键 ctrl-v 进入 vi 编辑器，即多行编辑命令行
bindkey '^v' edit-command-line
